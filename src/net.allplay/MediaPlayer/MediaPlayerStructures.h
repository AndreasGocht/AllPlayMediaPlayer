//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

#include "Structures.h"

namespace net { namespace allplay { namespace MediaPlayer {

public ref class MediaPlayerZoneInfo sealed
{
public:
    property Platform::String^ Value1
    {
        Platform::String^ get() { return m_value1; }
        void set(Platform::String^ value) { m_value1 = value; }
    }
     
    property int32 Value2
    {
        int32 get() { return m_value2; }
        void set(int32 value) { m_value2 = value; }
    }
     
    property Platform::Object^ Value3
    {
        Platform::Object^ get() { return m_value3; }
        void set(Platform::Object^ value) { m_value3 = value; }
    }
     
private:
    Platform::String^ m_value1;
    int32 m_value2;
    Platform::Object^ m_value3;
};

public ref class MediaItem sealed
{
public:
	property Platform::String^ Url
	{
		Platform::String^ get() { return m_value1; }
		void set(Platform::String^ value) { m_value1 = value; }
	}

	property Platform::String^ Title
	{
		Platform::String^ get() { return m_value2; }
		void set(Platform::String^ value) { m_value2 = value; }
	}

	property Platform::String^ Artist
	{
		Platform::String^ get() { return m_value3; }
		void set(Platform::String^ value) { m_value3 = value; }
	}

	property Platform::String^ ThumbnailUrl
	{
		Platform::String^ get() { return m_value4; }
		void set(Platform::String^ value) { m_value4 = value; }
	}

	property int64 Duration
	{
		int64 get() { return m_value5; }
		void set(int64 value) { m_value5 = value; }
	}

	property Platform::String^ MediaType
	{
		Platform::String^ get() { return m_value6; }
		void set(Platform::String^ value) { m_value6 = value; }
	}

	property Platform::String^ Album
	{
		Platform::String^ get() { return m_value7; }
		void set(Platform::String^ value) { m_value7 = value; }
	}

	property Platform::String^ Genre
	{
		Platform::String^ get() { return m_value8; }
		void set(Platform::String^ value) { m_value8 = value; }
	}

	property Windows::Foundation::Collections::IMap<Platform::String^, Platform::String^>^ OtherData
	{
		Windows::Foundation::Collections::IMap<Platform::String^, Platform::String^>^ get() { return m_value9; }
		void set(Windows::Foundation::Collections::IMap<Platform::String^, Platform::String^>^ value) { m_value9 = value; }
	}

	property Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ MediumDesc
	{
		Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ get() { return m_value10; }
		void set(Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ value) { m_value10 = value; }
	}

	property Platform::Object^ UserData
	{
		Platform::Object^ get() { return m_value11; }
		void set(Platform::Object^ value) { m_value11 = value; }
	}

private:
	Platform::String^ m_value1;
	Platform::String^ m_value2;
	Platform::String^ m_value3;
	Platform::String^ m_value4;
	int64 m_value5;
	Platform::String^ m_value6;
	Platform::String^ m_value7;
	Platform::String^ m_value8;
	Windows::Foundation::Collections::IMap<Platform::String^, Platform::String^>^ m_value9;
	Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ m_value10;
	Platform::Object^ m_value11;
};

public ref class MediaPlayerPlayState sealed
{
public:
    property Platform::String^ State
    {
        Platform::String^ get() { return m_value1; }
        void set(Platform::String^ value) { m_value1 = value; }
    }
     
    property int64 Position
    {
        int64 get() { return m_value2; }
        void set(int64 value) { m_value2 = value; }
    }
     
    property uint32 SampleRate
    {
        uint32 get() { return m_value3; }
        void set(uint32 value) { m_value3 = value; }
    }
     
    property uint32 AudioChannels
    {
        uint32 get() { return m_value4; }
        void set(uint32 value) { m_value4 = value; }
    }
     
    property uint32 BitsPerSample
    {
        uint32 get() { return m_value5; }
        void set(uint32 value) { m_value5 = value; }
    }
     
    property int32 CurrentIndex
    {
        int32 get() { return m_value6; }
        void set(int32 value) { m_value6 = value; }
    }
     
    property int32 NextIndex
    {
        int32 get() { return m_value7; }
        void set(int32 value) { m_value7 = value; }
    }
	property Windows::Foundation::Collections::IVector<MediaItem^>^ MediaItems
	{
		Windows::Foundation::Collections::IVector<MediaItem^>^ get() { return m_value8; }
		void set(Windows::Foundation::Collections::IVector<MediaItem^>^ value) { m_value8 = value; }
	}
     
private:
    Platform::String^ m_value1;
    int64 m_value2;
    uint32 m_value3;
    uint32 m_value4;
    uint32 m_value5;
    int32 m_value6;
    int32 m_value7;
	Windows::Foundation::Collections::IVector<MediaItem^>^ m_value8;
};

}}};
partial ref class TypeConversionHelpers
{
internal:
    static _Check_return_ int32 GetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _Out_ net::allplay::MediaPlayer::MediaPlayerZoneInfo^* value)
    {
        UNREFERENCED_PARAMETER(signature);

        (*value) = ref new net::allplay::MediaPlayer::MediaPlayerZoneInfo();

        alljoyn_msgarg argument1;
        alljoyn_msgarg argument2;
        alljoyn_msgarg argument3;
        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_get(argument, "(***)", &argument1, &argument2, &argument3));

        Platform::String^ value1;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument1, "s", &value1));
        (*value)->Value1 = value1;
        int32 value2;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument2, "i", &value2));
        (*value)->Value2 = value2;
        Platform::Object^ value3;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument3, "v", &value3));
        (*value)->Value3 = value3;
        
        return ER_OK;
    }

    static _Check_return_ int32 SetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _In_ net::allplay::MediaPlayer::MediaPlayerZoneInfo^ value)
    {
        UNREFERENCED_PARAMETER(signature);

        auto argument1 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument1, "s", value->Value1));
        auto argument2 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument2, "i", value->Value2));
        auto argument3 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument3, "v", value->Value3));

        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_set(argument, "(***)", argument1, argument2, argument3));
        alljoyn_msgarg_stabilize(argument);
        alljoyn_msgarg_destroy(argument1);
        alljoyn_msgarg_destroy(argument2);
        alljoyn_msgarg_destroy(argument3);

        return ER_OK;
    }

    static _Check_return_ int32 GetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _Out_ net::allplay::MediaPlayer::MediaPlayerPlayState^* value)
    {
        UNREFERENCED_PARAMETER(signature);

        (*value) = ref new net::allplay::MediaPlayer::MediaPlayerPlayState();

        alljoyn_msgarg argument1;
        alljoyn_msgarg argument2;
        alljoyn_msgarg argument3;
        alljoyn_msgarg argument4;
        alljoyn_msgarg argument5;
        alljoyn_msgarg argument6;
        alljoyn_msgarg argument7;
		alljoyn_msgarg argument8;
		RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_get(argument, "(********)", &argument1, &argument2, &argument3, &argument4, &argument5, &argument6, &argument7, &argument8));

        Platform::String^ value1;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument1, "s", &value1));
        (*value)->State = value1;
        int64 value2;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument2, "x", &value2));
        (*value)->Position = value2;
        uint32 value3;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument3, "u", &value3));
        (*value)->SampleRate = value3;
        uint32 value4;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument4, "u", &value4));
        (*value)->AudioChannels = value4;
        uint32 value5;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument5, "u", &value5));
        (*value)->BitsPerSample = value5;
        int32 value6;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument6, "i", &value6));
        (*value)->CurrentIndex = value6;
        int32 value7;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument7, "i", &value7));
        (*value)->NextIndex = value7;
		Windows::Foundation::Collections::IVector<PROJECT_NAMESPACE::MediaPlayer::MediaItem^>^ value8; // = ref new Platform::Collections::Vector<PROJECT_NAMESPACE::MediaPlayer::MediaItem^>();
		RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument8, "a(ssssxsssa{ss}a{sv}v)", &value8));
		(*value)->MediaItems = value8;
		
        //TODO: List of current/next items
        return ER_OK;
    }

    static _Check_return_ int32 SetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _In_ net::allplay::MediaPlayer::MediaPlayerPlayState^ value)
    {
        UNREFERENCED_PARAMETER(signature);

        auto argument1 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument1, "s", value->State));
        auto argument2 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument2, "x", value->Position));
        auto argument3 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument3, "u", value->SampleRate));
        auto argument4 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument4, "u", value->AudioChannels));
        auto argument5 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument5, "u", value->BitsPerSample));
        auto argument6 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument6, "i", value->CurrentIndex));
        auto argument7 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument7, "i", value->NextIndex));
		auto argument8 = alljoyn_msgarg_create();
		RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument8, "a(ssssxsssa{ss}a{sv}v)", value->MediaItems));
		//TODO: Other current and next media

        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_set(argument, "(********)", argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8));
        alljoyn_msgarg_stabilize(argument);
        alljoyn_msgarg_destroy(argument1);
        alljoyn_msgarg_destroy(argument2);
        alljoyn_msgarg_destroy(argument3);
        alljoyn_msgarg_destroy(argument4);
        alljoyn_msgarg_destroy(argument5);
        alljoyn_msgarg_destroy(argument6);
        alljoyn_msgarg_destroy(argument7);
		alljoyn_msgarg_destroy(argument8);

        return ER_OK;
    }

    static _Check_return_ int32 GetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _Out_ net::allplay::MediaPlayer::MediaItem^* value)
    {
        UNREFERENCED_PARAMETER(signature);

        (*value) = ref new net::allplay::MediaPlayer::MediaItem();

        alljoyn_msgarg argument1;
        alljoyn_msgarg argument2;
        alljoyn_msgarg argument3;
        alljoyn_msgarg argument4;
        alljoyn_msgarg argument5;
        alljoyn_msgarg argument6;
        alljoyn_msgarg argument7;
        alljoyn_msgarg argument8;
        alljoyn_msgarg argument9;
        alljoyn_msgarg argument10;
        alljoyn_msgarg argument11;
        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_get(argument, "(***********)", &argument1, &argument2, &argument3, &argument4, &argument5, &argument6, &argument7, &argument8, &argument9, &argument10, &argument11));

        Platform::String^ value1;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument1, "s", &value1));
        (*value)->Url = value1;
        Platform::String^ value2;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument2, "s", &value2));
        (*value)->Title = value2;
        Platform::String^ value3;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument3, "s", &value3));
        (*value)->Artist = value3;
        Platform::String^ value4;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument4, "s", &value4));
        (*value)->ThumbnailUrl = value4;
        int64 value5;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument5, "x", &value5));
        (*value)->Duration = value5;
        Platform::String^ value6;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument6, "s", &value6));
        (*value)->MediaType = value6;
        Platform::String^ value7;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument7, "s", &value7));
        (*value)->Album = value7;
        Platform::String^ value8;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument8, "s", &value8));
        (*value)->Genre = value8;
        Windows::Foundation::Collections::IMap<Platform::String^,Platform::String^>^ value9;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument9, "a{ss}", &value9));
        (*value)->OtherData = value9;
        Windows::Foundation::Collections::IMap<Platform::String^,Platform::Object^>^ value10;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument10, "a{sv}", &value10));
        (*value)->MediumDesc = value10;
        Platform::Object^ value11;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument11, "v", &value11));
        (*value)->UserData = value11;
        
        return ER_OK;
    }

    static _Check_return_ int32 SetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _In_ net::allplay::MediaPlayer::MediaItem^ value)
    {
        UNREFERENCED_PARAMETER(signature);

        auto argument1 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument1, "s", value->Url));
        auto argument2 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument2, "s", value->Title));
        auto argument3 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument3, "s", value->Artist));
        auto argument4 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument4, "s", value->ThumbnailUrl));
        auto argument5 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument5, "x", value->Duration));
        auto argument6 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument6, "s", value->MediaType));
        auto argument7 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument7, "s", value->Album));
        auto argument8 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument8, "s", value->Genre));
        auto argument9 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument9, "a{ss}", value->OtherData));
        auto argument10 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument10, "a{sv}", value->MediumDesc));
        auto argument11 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument11, "v", value->UserData));

        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_set(argument, "(***********)", argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8, argument9, argument10, argument11));
        alljoyn_msgarg_stabilize(argument);
        alljoyn_msgarg_destroy(argument1);
        alljoyn_msgarg_destroy(argument2);
        alljoyn_msgarg_destroy(argument3);
        alljoyn_msgarg_destroy(argument4);
        alljoyn_msgarg_destroy(argument5);
        alljoyn_msgarg_destroy(argument6);
        alljoyn_msgarg_destroy(argument7);
        alljoyn_msgarg_destroy(argument8);
        alljoyn_msgarg_destroy(argument9);
        alljoyn_msgarg_destroy(argument10);
        alljoyn_msgarg_destroy(argument11);

        return ER_OK;
    }

};
